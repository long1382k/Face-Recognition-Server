from flask import Flask, render_template, Response
import cv2
from ultralytics import YOLO
import threading
import queue

app = Flask(__name__)

# Load the YOLOv8 model
model = YOLO('yolov8n.pt')  # or yolov8s.pt, yolov8m.pt, etc.

# Create a queue to hold the processed frames
frame_queue = queue.Queue(maxsize=100)


def process_frames():
    cap = cv2.VideoCapture(0)  # Use 0 for webcam, or provide a video file path

    while True:
        success, frame = cap.read()
        if not success:
            break

        # Perform object detection
        results = model(frame)

        # Plot the detection results on the frame
        annotated_frame = results[0].plot()

        # Put the processed frame into the queue
        if not frame_queue.full():
            frame_queue.put(annotated_frame)
        else:
            # If the queue is full, skip this frame
            continue


def generate_frames():
    while True:
        if not frame_queue.empty():
            frame = frame_queue.get()
            time.sleep(0.1)

            # Encode the frame into a byte stream
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()

            # Yield the frame in the format that Flask expects
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/video_feed')
def video_feed():
    # Return the response generated by the generate_frames() function
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == "__main__":
    # Start the frame processing thread
    threading.Thread(target=process_frames, daemon=True).start()

    # Start the Flask app
    app.run(debug=True)
